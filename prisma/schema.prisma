// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  username  String    @unique
  password  String
  type      String    @default(" DRIVER")
  rides     Ride[]    @relation("UserRides")
  bookings  Booking[]
  cars      Car[]
}

model Car {
  id       String  @id @default(uuid())
  make     String  @db.VarChar(255)
  model    String  @db.VarChar(255)
  year     Int
  seats    Int?
  ownerId  String
  owner    User    @relation(fields: [ownerId], references: [id])
  rides    Ride[]
  isActive Boolean
}

model Ride {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  origin      String    @db.VarChar(255)
  destination String    @db.VarChar(255)
  date        DateTime
  carId       String
  car         Car       @relation(fields: [carId], references: [id])
  userId      String
  user        User      @relation("UserRides", fields: [userId], references: [id])
  bookings    Booking[]
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Booking {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  ride      Ride          @relation(fields: [rideId], references: [id])
  rideId    String
  status    BookingStatus @default(PENDING)
}
